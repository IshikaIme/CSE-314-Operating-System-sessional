diff --git a/Makefile b/Makefile
index 39a99d7..d47337d 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,7 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_cowtest\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..05e1ab0 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -63,6 +63,11 @@ void            ramdiskrw(struct buf*);
 void*           kalloc(void);
 void            kfree(void *);
 void            kinit(void);
+int             addReferenceCount(void* pa) ;
+int             checkIfCOWPage(pagetable_t pgtable, uint64 va);
+void*           allocateCOWPage(pagetable_t pgtable, uint64 va);
+
+
 
 // log.c
 void            initlog(int, struct superblock*);
diff --git a/kernel/defs.h.rej b/kernel/defs.h.rej
new file mode 100644
index 0000000..655bbed
--- /dev/null
+++ b/kernel/defs.h.rej
@@ -0,0 +1,13 @@
+diff a/kernel/defs.h b/kernel/defs.h	(rejected hunks)
+@@ -63,6 +63,11 @@ void            ramdiskrw(struct buf*);
+ void*           kalloc(void);
+ void            kfree(void *);
+ void            kinit(void);
++int             addReferenceCount(void* pa) ;
++int             checkIfCOWPage(pagetable_t pgtable, uint64 va);
++void*           allocateCOWPage(pagetable_t pgtable, uint64 va);
++
++
+ 
+ // log.c
+ void            initlog(int, struct superblock*);
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index 0699e7e..81edcaf 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -23,20 +23,35 @@ struct {
   struct run *freelist;
 } kmem;
 
+struct reference_struct{
+  struct spinlock lock;
+  int count[PHYSTOP/ PGSIZE];
+} reference;
+
+
+int getReferenceCount(void *pa){
+  return reference.count[(uint64)pa / PGSIZE];
+}
+
+
 void
 kinit()
 {
   initlock(&kmem.lock, "kmem");
   freerange(end, (void*)PHYSTOP);
-}
+  initlock(&reference.lock, "reference");
+  }
 
 void
 freerange(void *pa_start, void *pa_end)
 {
   char *p;
   p = (char*)PGROUNDUP((uint64)pa_start);
-  for(; p + PGSIZE <= (char*)pa_end; p += PGSIZE)
+  for(; p + PGSIZE <= (char*)pa_end; p += PGSIZE){
+    reference.count[(uint64)p / PGSIZE ] =1;
     kfree(p);
+
+}
 }
 
 // Free the page of physical memory pointed at by pa,
@@ -48,18 +63,27 @@ kfree(void *pa)
 {
   struct run *r;
 
-  if(((uint64)pa % PGSIZE) != 0 || (char*)pa < end || (uint64)pa >= PHYSTOP)
+    if(((uint64)pa % PGSIZE) != 0 || (char*)pa < end || (uint64)pa >= PHYSTOP)
     panic("kfree");
 
+    acquire(&reference.lock);
+    if(--reference.count[(uint64)pa / PGSIZE] ==0 )
+    {
+    release(&reference.lock);
+
   // Fill with junk to catch dangling refs.
-  memset(pa, 1, PGSIZE);
+    memset(pa, 1, PGSIZE);
 
-  r = (struct run*)pa;
+    r = (struct run*)pa;
 
-  acquire(&kmem.lock);
-  r->next = kmem.freelist;
-  kmem.freelist = r;
-  release(&kmem.lock);
+    acquire(&kmem.lock);
+    r->next = kmem.freelist;
+    kmem.freelist = r;
+    release(&kmem.lock);
+}
+  else{
+    release(&reference.lock);
+}
 }
 
 // Allocate one 4096-byte page of physical memory.
@@ -72,11 +96,81 @@ kalloc(void)
 
   acquire(&kmem.lock);
   r = kmem.freelist;
-  if(r)
+  if(r){
     kmem.freelist = r->next;
-  release(&kmem.lock);
+    acquire(&reference.lock);
+    reference.count[(uint64)r /PGSIZE]=1;
+    release(&reference.lock);
+
+  }
+    release(&kmem.lock);
 
   if(r)
     memset((char*)r, 5, PGSIZE); // fill with junk
   return (void*)r;
 }
+
+int addReferenceCount(void* pa) //kaddrefcnt
+{
+  if(((char*)pa < end) || (uint64)pa >= PHYSTOP || ((uint64)pa % PGSIZE ) != 0)
+    return -1;
+  acquire(&reference.lock);
+  ++reference.count[(uint64)pa / PGSIZE];
+  release(&reference.lock);
+  return 0;
+}
+
+
+int checkIfCOWPage(pagetable_t pgtable, uint64 va)
+{
+  if(va >= MAXVA)
+    return -1;
+
+  pte_t* pgEntry = walk( pgtable, va, 0);
+  if(pgEntry == 0)
+    return -1;
+
+  if((*pgEntry & PTE_V)==0)
+    return -1;
+  
+  return (*pgEntry & PTE_CW ? 0: -1);
+}
+
+void* allocateCOWPage(pagetable_t pgtable, uint64 va)
+{
+  if(va% PGSIZE != 0)
+    return 0;
+
+  uint64 pa = walkaddr(pgtable, va);
+  if(pa==0)
+    return 0;
+
+  pte_t* pt_entry = walk(pgtable, va,0);
+  if (getReferenceCount((char*)pa) ==1)
+  {
+    *pt_entry |= PTE_W;
+    *pt_entry &= ~PTE_CW;
+    return (void*) pa;
+  }
+  else{
+    char * mem = kalloc();
+    if(mem ==0 )
+      return 0;
+
+    memmove(mem, (char*) pa, PGSIZE);
+     *pt_entry &= ~PTE_V;
+
+      if(mappages(pgtable, va, PGSIZE, (uint64)mem, (PTE_FLAGS(*pt_entry)| PTE_W)& ~PTE_CW) != 0)
+      {
+        kfree(mem);
+        *pt_entry |= PTE_V;
+        return 0;
+      }
+
+    kfree((char*) PGROUNDDOWN(pa));
+
+     return mem;
+  }
+
+}
+
diff --git a/kernel/kalloc.c.rej b/kernel/kalloc.c.rej
new file mode 100644
index 0000000..f252cc8
--- /dev/null
+++ b/kernel/kalloc.c.rej
@@ -0,0 +1,158 @@
+diff a/kernel/kalloc.c b/kernel/kalloc.c	(rejected hunks)
+@@ -23,20 +23,35 @@ struct {
+   struct run *freelist;
+ } kmem;
+ 
++struct reference_struct{
++  struct spinlock lock;
++  int count[PHYSTOP/ PGSIZE];
++} reference;
++
++
++int getReferenceCount(void *pa){
++  return reference.count[(uint64)pa / PGSIZE];
++}
++
++
+ void
+ kinit()
+ {
+   initlock(&kmem.lock, "kmem");
+   freerange(end, (void*)PHYSTOP);
+-}
++  initlock(&reference.lock, "reference");
++  }
+ 
+ void
+ freerange(void *pa_start, void *pa_end)
+ {
+   char *p;
+   p = (char*)PGROUNDUP((uint64)pa_start);
+-  for(; p + PGSIZE <= (char*)pa_end; p += PGSIZE)
++  for(; p + PGSIZE <= (char*)pa_end; p += PGSIZE){
++    reference.count[(uint64)p / PGSIZE ] =1;
+     kfree(p);
++
++}
+ }
+ 
+ // Free the page of physical memory pointed at by pa,
+@@ -48,18 +63,27 @@ kfree(void *pa)
+ {
+   struct run *r;
+ 
+-  if(((uint64)pa % PGSIZE) != 0 || (char*)pa < end || (uint64)pa >= PHYSTOP)
++    if(((uint64)pa % PGSIZE) != 0 || (char*)pa < end || (uint64)pa >= PHYSTOP)
+     panic("kfree");
+ 
++    acquire(&reference.lock);
++    if(--reference.count[(uint64)pa / PGSIZE] ==0 )
++    {
++    release(&reference.lock);
++
+   // Fill with junk to catch dangling refs.
+-  memset(pa, 1, PGSIZE);
++    memset(pa, 1, PGSIZE);
+ 
+-  r = (struct run*)pa;
++    r = (struct run*)pa;
+ 
+-  acquire(&kmem.lock);
+-  r->next = kmem.freelist;
+-  kmem.freelist = r;
+-  release(&kmem.lock);
++    acquire(&kmem.lock);
++    r->next = kmem.freelist;
++    kmem.freelist = r;
++    release(&kmem.lock);
++}
++  else{
++    release(&reference.lock);
++}
+ }
+ 
+ // Allocate one 4096-byte page of physical memory.
+@@ -72,11 +96,81 @@ kalloc(void)
+ 
+   acquire(&kmem.lock);
+   r = kmem.freelist;
+-  if(r)
++  if(r){
+     kmem.freelist = r->next;
+-  release(&kmem.lock);
++    acquire(&reference.lock);
++    reference.count[(uint64)r /PGSIZE]=1;
++    release(&reference.lock);
++
++  }
++    release(&kmem.lock);
+ 
+   if(r)
+     memset((char*)r, 5, PGSIZE); // fill with junk
+   return (void*)r;
+ }
++
++int addReferenceCount(void* pa) //kaddrefcnt
++{
++  if(((char*)pa < end) || (uint64)pa >= PHYSTOP || ((uint64)pa % PGSIZE ) != 0)
++    return -1;
++  acquire(&reference.lock);
++  ++reference.count[(uint64)pa / PGSIZE];
++  release(&reference.lock);
++  return 0;
++}
++
++
++int checkIfCOWPage(pagetable_t pgtable, uint64 va)
++{
++  if(va >= MAXVA)
++    return -1;
++
++  pte_t* pgEntry = walk( pgtable, va, 0);
++  if(pgEntry == 0)
++    return -1;
++
++  if((*pgEntry & PTE_V)==0)
++    return -1;
++  
++  return (*pgEntry & PTE_CW ? 0: -1);
++}
++
++void* allocateCOWPage(pagetable_t pgtable, uint64 va)
++{
++  if(va% PGSIZE != 0)
++    return 0;
++
++  uint64 pa = walkaddr(pgtable, va);
++  if(pa==0)
++    return 0;
++
++  pte_t* pt_entry = walk(pgtable, va,0);
++  if (getReferenceCount((char*)pa) ==1)
++  {
++    *pt_entry |= PTE_W;
++    *pt_entry &= ~PTE_CW;
++    return (void*) pa;
++  }
++  else{
++    char * mem = kalloc();
++    if(mem ==0 )
++      return 0;
++
++    memmove(mem, (char*) pa, PGSIZE);
++     *pt_entry &= ~PTE_V;
++
++      if(mappages(pgtable, va, PGSIZE, (uint64)mem, (PTE_FLAGS(*pt_entry)| PTE_W)& ~PTE_CW) != 0)
++      {
++        kfree(mem);
++        *pt_entry |= PTE_V;
++        return 0;
++      }
++
++    kfree((char*) PGROUNDDOWN(pa));
++
++     return mem;
++  }
++
++}
++
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 20a01db..c023ab7 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -343,6 +343,7 @@ typedef uint64 *pagetable_t; // 512 PTEs
 #define PTE_W (1L << 2)
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // user can access
+#define PTE_CW (1L << 8) // COW at reserved place
 
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
diff --git a/kernel/riscv.h.rej b/kernel/riscv.h.rej
new file mode 100644
index 0000000..4ae536b
--- /dev/null
+++ b/kernel/riscv.h.rej
@@ -0,0 +1,9 @@
+diff a/kernel/riscv.h b/kernel/riscv.h	(rejected hunks)
+@@ -343,6 +343,7 @@ typedef uint64 *pagetable_t; // 512 PTEs
+ #define PTE_W (1L << 2)
+ #define PTE_X (1L << 3)
+ #define PTE_U (1L << 4) // user can access
++#define PTE_CW (1L << 8) // COW at reserved place
+ 
+ // shift a physical address to the right place for a PTE.
+ #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
diff --git a/kernel/trap.c b/kernel/trap.c
index 512c850..68d9ee0 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -65,7 +65,16 @@ usertrap(void)
     intr_on();
 
     syscall();
-  } else if((which_dev = devintr()) != 0){
+  } 
+  else if (r_scause()==13 || r_scause()==15)
+  {
+    uint64 fault_va = r_stval();
+    if(fault_va>= p->sz || (checkIfCOWPage (p->pagetable, fault_va)!=0) || allocateCOWPage( p->pagetable, PGROUNDDOWN(fault_va))==0)
+      p->killed=1;
+  }
+  
+  
+  else if((which_dev = devintr()) != 0){
     // ok
   } else {
     printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
diff --git a/kernel/trap.c.rej b/kernel/trap.c.rej
new file mode 100644
index 0000000..fbbe3ce
--- /dev/null
+++ b/kernel/trap.c.rej
@@ -0,0 +1,19 @@
+diff a/kernel/trap.c b/kernel/trap.c	(rejected hunks)
+@@ -65,7 +65,16 @@ usertrap(void)
+     intr_on();
+ 
+     syscall();
+-  } else if((which_dev = devintr()) != 0){
++  } 
++  else if (r_scause()==13 || r_scause()==15)
++  {
++    uint64 fault_va = r_stval();
++    if(fault_va>= p->sz || (checkIfCOWPage (p->pagetable, fault_va)!=0) || allocateCOWPage( p->pagetable, PGROUNDDOWN(fault_va))==0)
++      p->killed=1;
++  }
++  
++  
++  else if((which_dev = devintr()) != 0){
+     // ok
+   } else {
+     printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..5ae64ae 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -308,7 +308,7 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   pte_t *pte;
   uint64 pa, i;
   uint flags;
-  char *mem;
+  //char *mem;
 
   for(i = 0; i < sz; i += PGSIZE){
     if((pte = walk(old, i, 0)) == 0)
@@ -317,20 +317,41 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
       panic("uvmcopy: page not present");
     pa = PTE2PA(*pte);
     flags = PTE_FLAGS(*pte);
-    if((mem = kalloc()) == 0)
-      goto err;
-    memmove(mem, (char*)pa, PGSIZE);
-    if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
-      kfree(mem);
-      goto err;
+    if(flags & PTE_W)
+    {
+      flags |= PTE_CW; //COW page marked
+      flags &= (~PTE_W); //writable option removed
+      *pte = PA2PTE(pa) | flags;
+    }
+    
+    if(mappages(new, i, PGSIZE, pa, flags) !=0)
+    {
+      uvmunmap(new, 0, i/PGSIZE , 1);
+      return -1;
     }
+//two lines be added
+    if(addReferenceCount((void*)pa)!=0)
+        return -1;
+    
   }
-  return 0;
 
- err:
-  uvmunmap(new, 0, i / PGSIZE, 1);
-  return -1;
+  
+  return 0;
 }
+  //   if((mem = kalloc()) == 0)
+  //     goto err;
+  //   memmove(mem, (char*)pa, PGSIZE);
+  //   if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
+  //     kfree(mem);
+  //     goto err;
+  //   }
+  // }
+//   return 0;
+
+//  err:
+//   uvmunmap(new, 0, i / PGSIZE, 1);
+//   return -1;
+//}
 
 // mark a PTE invalid for user access.
 // used by exec for the user stack guard page.
@@ -356,6 +377,14 @@ copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
   while(len > 0){
     va0 = PGROUNDDOWN(dstva);
     pa0 = walkaddr(pagetable, va0);
+
+
+    if(checkIfCOWPage(pagetable,va0)==0)
+    {
+      pa0= (uint64)allocateCOWPage(pagetable,va0);
+    }
+
+
     if(pa0 == 0)
       return -1;
     n = PGSIZE - (dstva - va0);
diff --git a/kernel/vm.c.rej b/kernel/vm.c.rej
new file mode 100644
index 0000000..ffb4827
--- /dev/null
+++ b/kernel/vm.c.rej
@@ -0,0 +1,77 @@
+diff a/kernel/vm.c b/kernel/vm.c	(rejected hunks)
+@@ -308,7 +308,7 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
+   pte_t *pte;
+   uint64 pa, i;
+   uint flags;
+-  char *mem;
++  //char *mem;
+ 
+   for(i = 0; i < sz; i += PGSIZE){
+     if((pte = walk(old, i, 0)) == 0)
+@@ -317,20 +317,41 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
+       panic("uvmcopy: page not present");
+     pa = PTE2PA(*pte);
+     flags = PTE_FLAGS(*pte);
+-    if((mem = kalloc()) == 0)
+-      goto err;
+-    memmove(mem, (char*)pa, PGSIZE);
+-    if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
+-      kfree(mem);
+-      goto err;
++    if(flags & PTE_W)
++    {
++      flags |= PTE_CW; //COW page marked
++      flags &= (~PTE_W); //writable option removed
++      *pte = PA2PTE(pa) | flags;
++    }
++    
++    if(mappages(new, i, PGSIZE, pa, flags) !=0)
++    {
++      uvmunmap(new, 0, i/PGSIZE , 1);
++      return -1;
+     }
++//two lines be added
++    if(addReferenceCount((void*)pa)!=0)
++        return -1;
++    
+   }
+-  return 0;
+ 
+- err:
+-  uvmunmap(new, 0, i / PGSIZE, 1);
+-  return -1;
++  
++  return 0;
+ }
++  //   if((mem = kalloc()) == 0)
++  //     goto err;
++  //   memmove(mem, (char*)pa, PGSIZE);
++  //   if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
++  //     kfree(mem);
++  //     goto err;
++  //   }
++  // }
++//   return 0;
++
++//  err:
++//   uvmunmap(new, 0, i / PGSIZE, 1);
++//   return -1;
++//}
+ 
+ // mark a PTE invalid for user access.
+ // used by exec for the user stack guard page.
+@@ -356,6 +377,14 @@ copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
+   while(len > 0){
+     va0 = PGROUNDDOWN(dstva);
+     pa0 = walkaddr(pagetable, va0);
++
++
++    if(checkIfCOWPage(pagetable,va0)==0)
++    {
++      pa0= (uint64)allocateCOWPage(pagetable,va0);
++    }
++
++
+     if(pa0 == 0)
+       return -1;
+     n = PGSIZE - (dstva - va0);
diff --git a/user/cowtest.c b/user/cowtest.c
new file mode 100644
index 0000000..0aa6a2a
--- /dev/null
+++ b/user/cowtest.c
@@ -0,0 +1,209 @@
+#include "kernel/types.h"
+#include "kernel/memlayout.h"
+#include "user/user.h"
+#include "kernel/param.h"
+#include "kernel/riscv.h"
+
+
+void
+simple_testing()
+{
+  printf("simple_testing: ");
+  int allocate_size = ((uint64)(PHYSTOP - KERNBASE)/3) *2; // allocating more than half of physical memory
+  char *p = sbrk(allocate_size); //incrementing size by allocate_size bytes
+
+  //Here sbrk(int *incr) func returns the value of  break point, if it returns -1 then sbrk is failed
+
+  //if increasing memory failed then the kernel couldnt increase memory for the page
+  if(p == (char*)0xffffffffffffffffL){ 
+    printf("sbrk(%d) failed returning -1\n", allocate_size); 
+    exit(-1);
+  }
+
+  //allocate process till allocate size
+  for(char *q = p; q < p + allocate_size; q += 4096){
+    *(int*)q = getpid();
+  }
+//testing if fork works
+  int pid = fork();
+
+  //if fork returns -1 then it was failed
+  if(pid < 0){
+    printf("fork() failed\n");
+    exit(-1);
+  }
+//the program has terminated successfully without any errors or interruptions.
+  if(pid == 0)
+    exit(0);
+
+  wait(0);
+
+
+//checking if deallocation works
+  if(sbrk(-allocate_size) == (char*)0xffffffffffffffffL){
+    printf("sbrk(-%d) failed\n", allocate_size);
+    exit(-1);
+  }
+
+  printf("passed\n");
+}
+
+
+
+
+
+
+// three processes all write COW memory. this causes more than half of physical memory
+// to be allocated, so it also checks whether copied pages are freed.
+void
+three_testing()
+{
+  int allocate_size = (uint64)(PHYSTOP - KERNBASE)/ 4;
+  int pid1, pid2;
+
+  printf("three testing: ");
+  
+  //checks if sbrk works for size allocation
+  char *p = sbrk(allocate_size);
+  if(p == (char*)0xffffffffffffffffL){
+    printf("sbrk(%d) failed\n", allocate_size);
+    exit(-1);
+  }
+
+//checks if fork works two times
+  pid1 = fork();
+  if(pid1 < 0){
+    printf("fork failed\n");
+    exit(-1);
+  }
+  if(pid1 == 0){
+    pid2 = fork();
+    if(pid2 < 0){
+      printf("fork failed");
+      exit(-1);
+    }
+    if(pid2 == 0){
+      for(char *q = p; q < p + (allocate_size/5)*4; q += 4096){
+        *(int*)q = getpid();
+      }
+
+      for(char *q = p; q < p + (allocate_size/5)*4; q += 4096){
+        if(*(int*)q != getpid()){
+          printf("wrong content\n");
+          exit(-1);
+        }
+      }
+      exit(-1);
+    }
+    for(char *q = p; q < p + (allocate_size/2); q += 4096){
+      *(int*)q = 9999;
+    }
+    exit(0);
+  }
+
+  for(char *q = p; q < p + allocate_size; q += 4096){
+    *(int*)q = getpid();
+  }
+
+  wait(0);
+
+  sleep(1);
+
+  for(char *q = p; q < p + allocate_size; q += 4096){
+    if(*(int*)q != getpid()){
+      printf("wrong content\n");
+      exit(-1);
+    }
+  }
+
+  if(sbrk(-allocate_size) == (char*)0xffffffffffffffffL){
+    printf("sbrk(-%d) failed\n", allocate_size);
+    exit(-1);
+  }
+
+  printf("passed\n");
+}
+
+char junk1[4096];
+int fds[2];
+char junk2[4096];
+char buf[4096];
+char junk3[4096];
+
+// test whether copyout() simulates COW faults.
+void
+file_testing()
+{
+  printf("file: ");
+  
+  buf[0] = 99;
+
+  //checkes pipe() 
+  for(int i = 0; i < 4; i++){
+    if(pipe(fds) != 0){
+      printf("pipe() failed\n");
+      exit(-1);
+    }
+
+    //checkes fork
+    int pid = fork();
+    if(pid < 0){
+      printf("fork failed\n");
+      exit(-1);
+    }
+    if(pid == 0){
+      sleep(1);
+      if(read(fds[0], buf, sizeof(i)) != sizeof(i)){
+        printf("error: read failed\n");
+        exit(1);
+      }
+      sleep(1);
+      int j = *(int*)buf;
+      if(j != i){
+        printf("error: read the wrong value\n");
+        exit(1);
+      }
+      exit(0);
+    }
+    if(write(fds[1], &i, sizeof(i)) != sizeof(i)){
+      printf("error: write failed\n");
+      exit(-1);
+    }
+  }
+
+  //checkes execution status
+  int xstatus = 0;
+  for(int i = 0; i < 4; i++) {
+    wait(&xstatus);
+    if(xstatus != 0) {
+      exit(1);
+    }
+  }
+
+  if(buf[0] != 99){
+    printf("error: child overwrote parent\n");
+    exit(1);
+  }
+
+  printf("passed\n");
+}
+
+int
+main(int argc, char *argv[])
+{
+  simple_testing();
+
+  // check that the first simpletest() freed the physical memory.
+  simple_testing();
+
+ // cow_pa_testing();
+  three_testing();
+  three_testing();
+  three_testing();
+  //TESTING all files
+  file_testing();
+
+  printf("CONGRATS! ALL COW TESTS PASSED\n");
+
+  exit(0);
+}
