diff --git a/Makefile b/Makefile
index 39a99d7..016eba5 100644
--- a/Makefile
+++ b/Makefile
@@ -30,6 +30,7 @@ OBJS = \
   $K/plic.o \
   $K/virtio_disk.o
 
+
 # riscv64-unknown-elf- or riscv64-linux-gnu-
 # perhaps in /opt/riscv/bin
 #TOOLPREFIX = 
@@ -125,6 +126,9 @@ UPROGS=\
 	$U/_ln\
 	$U/_ls\
 	$U/_mkdir\
+	$U/_myprog\
+	$U/_trace\
+	$U/_sysinfotest\
 	$U/_rm\
 	$U/_sh\
 	$U/_stressfs\
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index 0699e7e..7c84743 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -80,3 +80,18 @@ kalloc(void)
     memset((char*)r, 5, PGSIZE); // fill with junk
   return (void*)r;
 }
+
+int free_memory_count(void)
+{
+  int i=0;
+  struct run *node;
+  acquire(&kmem.lock);
+
+  for( node= kmem.freelist; node; node= node->next)
+    ++i;
+
+  release(&kmem.lock);
+
+  return i*4096;
+
+}
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..de376d7 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -301,7 +301,8 @@ fork(void)
 
   // Cause fork to return 0 in the child.
   np->trapframe->a0 = 0;
-
+  // copy trace flag
+  np->traceflag = p->traceflag;
   // increment reference counts on open file descriptors.
   for(i = 0; i < NOFILE; i++)
     if(p->ofile[i])
@@ -340,6 +341,28 @@ reparent(struct proc *p)
   }
 }
 
+
+int count_proc(void)
+{
+  int i=0;
+  struct proc  *pc;
+
+  for(pc=proc; pc< &proc[NPROC]; pc++)
+  {
+    acquire(&pc->lock);
+    if(pc->state != UNUSED)
+      ++i;
+    release(&pc->lock);
+
+  }
+
+  return i;
+
+}
+
+
+
+
 // Exit the current process.  Does not return.
 // An exited process remains in the zombie state
 // until its parent calls wait().
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..9d09f37 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -91,7 +91,7 @@ struct proc {
   int killed;                  // If non-zero, have been killed
   int xstate;                  // Exit status to be returned to parent's wait
   int pid;                     // Process ID
-
+  int traceflag;               // trace flag
   // wait_lock must be held when using this:
   struct proc *parent;         // Parent process
 
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..0347156 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -7,6 +7,39 @@
 #include "syscall.h"
 #include "defs.h"
 
+
+
+
+
+
+char *syscallnames[] = {
+[SYS_fork]    "fork",
+[SYS_exit]    "exit",
+[SYS_wait]    "wait",
+[SYS_pipe]    "pipe",
+[SYS_read]    "read",
+[SYS_kill]    "kill",
+[SYS_exec]    "exec",
+[SYS_fstat]   "fstat",
+[SYS_chdir]   "chdir",
+[SYS_dup]     "dup",
+[SYS_getpid]  "getpid", 
+[SYS_sbrk]   "sbrk",
+[SYS_sleep]  "sleep",
+[SYS_uptime] "uptime",
+[SYS_open]   "open",
+[SYS_write]  "write",
+[SYS_mknod]  "mknod",
+[SYS_unlink] "unlink",
+[SYS_link]   "link",
+[SYS_mkdir]  "mkdir",
+[SYS_close]  "close",
+[SYS_getyear] "getyear",
+[SYS_trace]   "trace",  
+[SYS_sysinfo] "sysinfo",
+};
+
+
 // Fetch the uint64 at addr from the current process.
 int
 fetchaddr(uint64 addr, uint64 *ip)
@@ -101,7 +134,9 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
-
+extern uint64 sys_getyear(void);
+extern uint64 sys_trace(void); 
+extern uint64 sys_sysinfo(void);
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
 static uint64 (*syscalls[])(void) = {
@@ -126,6 +161,9 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_getyear] sys_getyear,
+[SYS_trace]   sys_trace,
+[SYS_sysinfo] sys_sysinfo,
 };
 
 void
@@ -139,9 +177,16 @@ syscall(void)
     // Use num to lookup the system call function for num, call it,
     // and store its return value in p->trapframe->a0
     p->trapframe->a0 = syscalls[num]();
+
+    if (p->traceflag == num) {
+	      printf("pid: %d: syscall %s -> %d\n",  p->pid, syscallnames[num], p->trapframe->a0);
+    }
+
   } else {
-    printf("%d %s: unknown sys call %d\n",
-            p->pid, p->name, num);
-    p->trapframe->a0 = -1;
+        printf("%d %s: unknown sys call %d\n",
+                p->pid, p->name, num);
+        p->trapframe->a0 = -1;
   }
+
+
 }
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..569b7e9 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,6 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_getyear 22
+#define SYS_trace 23
+#define SYS_sysinfo 24
\ No newline at end of file
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..a1778c7 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,33 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_getyear(void)
+{
+  return 1975;
+}
+
+uint64
+sys_trace(void)
+{
+
+
+argint(0, &myproc()->traceflag);
+return 0;
+}
+
+int free_memory_count(void);
+int count_proc(void);
+
+uint64
+sys_sysinfo(void)
+{
+  int memoryfree= free_memory_count();
+  int proccount= count_proc();
+  printf("\n sysinfo system call prints:\n");
+  printf("free-memory: %d bytes\n", memoryfree );
+  printf("nproc : %d\n\n" , proccount);
+  return 0;
+}
+
diff --git a/user/myprog.c b/user/myprog.c
new file mode 100644
index 0000000..338581b
--- /dev/null
+++ b/user/myprog.c
@@ -0,0 +1,10 @@
+#include"kernel/types.h"
+#include"kernel/stat.h"
+#include"user/user.h"
+
+int main(void)
+{
+    printf("Hello world of %d\n",  getyear());
+
+    return 0;
+}
\ No newline at end of file
diff --git a/user/sysinfotest.c b/user/sysinfotest.c
new file mode 100644
index 0000000..25ade16
--- /dev/null
+++ b/user/sysinfotest.c
@@ -0,0 +1,72 @@
+#include "kernel/types.h"
+#include "kernel/riscv.h"
+#include "user/user.h"
+
+
+void
+sinfo() {
+  if (sysinfo() < 0) {
+    printf("FAIL: sysinfo failed");
+    exit(1);
+  }
+}
+
+
+void
+testmem() {
+  printf("\n\t\t\tTesting memory\n");
+  printf("\nInitial State\n");
+  sinfo();
+
+  printf("Using up one more page (4094 bytes).\nFreemem should reduce by that much!\n");
+  if((uint64)sbrk(PGSIZE) == 0xffffffffffffffff){
+    printf("sbrk failed");
+    exit(1);
+  }
+
+  sinfo();
+
+  printf("Giving back that one more page to the pool (4094 bytes).\nFreemem should go back to the initial value!\n");
+  
+  if((uint64)sbrk(-PGSIZE) == 0xffffffffffffffff){
+    printf("sbrk failed");
+    exit(1);
+  }
+
+  sinfo();
+}
+
+void testproc() {
+  int status;
+  int pid;
+
+  printf("\n\t\t\tTesting nproc\n");
+  printf("\nInitial State\n");
+  sinfo();
+
+  pid = fork();
+  if(pid < 0){
+    printf("sysinfotest: fork failed\n");
+    exit(1);
+  }
+  if(pid == 0){  // inside the child process
+    printf("Created one new process. So nproc should increase by 1.");
+    sinfo();
+    exit(0);
+  }
+
+  wait(&status); // wait for the created child process to end
+  printf("Created process ended. So nproc should go back to initial value.");
+  sinfo(); 
+}
+
+
+int
+main(int argc, char *argv[])
+{
+  printf("sysinfotest: start\n");
+  testmem();
+  testproc();
+  printf("sysinfotest: done\n");
+  exit(0);
+}
diff --git a/user/trace.c b/user/trace.c
new file mode 100644
index 0000000..1e322ce
--- /dev/null
+++ b/user/trace.c
@@ -0,0 +1,27 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  int i;
+  char *nargv[MAXARG];
+
+  if(argc < 3 || (argv[1][0] < '0' || argv[1][0] > '9')){
+    fprintf(2, "Usage: %s sys_call_num command\n", argv[0]);
+    exit(1);
+  }
+
+  if (trace(atoi(argv[1])) < 0) {
+    fprintf(2, "%s: trace failed\n", argv[0]);
+    exit(1);
+  }
+  
+  for(i = 2; i < argc && i < MAXARG; i++){
+    nargv[i-2] = argv[i];
+  }
+  exec(nargv[0], nargv);
+  exit(0);
+}
diff --git a/user/user.h b/user/user.h
index 4d398d5..c588f8d 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,7 +22,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
-
+int getyear(void);
+int trace(int);
+int sysinfo(void);
 // ulib.c
 int stat(const char*, struct stat*);
 char* strcpy(char*, const char*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..1c2fe18 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,6 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("getyear");
+entry("trace");
+entry("sysinfo");
